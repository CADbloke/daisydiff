<html>
<body>

<h1><tt>HTML DIFF PROJECT:</tt></h1>

<h2><tt>PROJECT DESCRIPTION:</tt></h2>

<p><tt>The goal of the "HTML diff" project is to provide a Java library
that</tt><br/>
<tt>compares XML files. The minimum inputs are 2 XML files, and the minimum</tt>
<br/>
<tt>output file is a Java representation of the basic operations that
turned</tt><br/>
<tt>the first data structure into the second. </tt><br/>
<tt>This output can be converted to an XML-based representation or, given</tt>
<br/>
<tt>the proper formatting guidelines (in a yet undecided data type), into
an</tt><br/>
<tt>html file with a certain syntax to denote changes. </tt><br/>
<tt>In addition, distance metrics can be computed that allow the user to</tt>
<br/>
<tt>quantify by how much 2 files differ. This enables them to distinguish</tt>
<br/>
<tt>minor from major changes, and tells them what the (chronological)</tt><br/>
<tt>relationships are between 3 files.</tt><br/>
<tt>For computing the changes there can be several algorithms:</tt><br/>
<tt>- A simple LCS (Longest Common Subsequence) implementation that will</tt>
<br/>
<tt>work on plain text or simple HTML files. This algorithm is the
algorithm</tt><br/>
<tt>used in the Unix "diff" command, in CVS, patch, etc. It's</tt><br/>
<tt>computationally the best algorithm but it will destroy complex XML</tt>
<br/>
<tt>hierarchies. There are many open source implementations available of</tt>
<br/>
<tt>this algorithm. For instance the Wikipedia and Drupal software uses
LCS,</tt><br/>
<tt>as does the current text-based implementation in Daisy.</tt><br/>
<tt>- A more complicated graph algorithm that uses a greedy method to</tt><br/>
<tt>compute a difference but not the optimal one. this can be optimal for</tt>
<br/>
<tt>XML files with little reproduction.</tt><br/>
<tt>- A complex algorithm with perfect accurateness.</tt><br/>
<tt>For each of these possibilities there are papers that describe</tt><br/>
<tt>algorithms.</tt><br/>
<tt>There should also be an option that chooses the optimal algorithm for a</tt>
<br/>
<tt>given XML file at runtime (based on length, complexity, leafs, ...)</tt></p>

<h2><tt>DELIVERABLES:</tt></h2>

<p><tt>- A literature study with an outline of all the possible algorithms
+</tt><br/>
<tt>Testing of existing (proprietary) code.</tt><br/>
<tt>- A study of the XML files used by DaisyCMS, which I would need to</tt>
<br/>
<tt>prioritize on. (Do we want to compare ordered or unordered XML files?)</tt>
<br/>
<tt>- A LCS implementation (could be copied from the current Daisy</tt><br/>
<tt>codebase?)</tt><br/>
<tt>- A HTML respresentation/change syntax that can be used for DaisyCMS</tt>
<br/>
<tt>- One or more graph-based implementations</tt><br/>
<tt>- A library with all the options from the project description</tt><br/>
<tt>- Documentation</tt></p>

<h2><tt>TIME LINE:</tt></h2>

<p><tt>June 1st - June 30th: Given the fact that in Belgium the exam period</tt>
<br/>
<tt>ends somewhere in the of June this will be my least productive period
of</tt><br/>
<tt>the summer: Getting to know Daisy, and the literature study will be all</tt>
<br/>
<tt>I can cope with.</tt></p>

<p><tt>July 1st - July 16th: To make up for the slow month of June, I will
work</tt><br/>
<tt>day and night to finish the LCS Implementation and the HTML</tt><br/>
<tt>representation.</tt></p>

<p><tt>July 16th - July 26th: A well deserved vacation in Greece.</tt></p>

<p><tt>July 27th - August 15th: One or more graph algorithms.</tt></p>

<p><tt>August 15th - August 31st: Finish the package, complete as much</tt>
<br/>
<tt>documentation as possible before the final deadline.</tt></p>

<p><tt>September 1st - September 25th: Integrate the package into DaisyCMS
and</tt><br/>
<tt>finish the unfinished.</tt></p>

<h2><tt>BIO:</tt></h2>

<p><tt>todo</tt><br/>
<tt>+ I'd like to work in the offices in Ghent</tt><br/>
<tt>+ I'd like to do this as an internship for my university (how's that
for</tt><br/>
<tt>a guaranteed commitment; at least i wont run away after the initial</tt>
<br/>
<tt>payment)</tt></p>

</body>
</html>