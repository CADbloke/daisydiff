/*
 * Copyright 2004 Outerthought bvba and Schaubroeck nv
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.outerj.daisy.diff;

import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.AttributesImpl;

/**
 * Outputs the diff result as HTML elements to a SAX ContentHandler.
 * The startDocument and endDocument events are not generated by this class.
 */
public class HtmlSaxDiffOutput implements DiffOutput {
    private ContentHandler consumer;
    private DiffLineType currentLineType;

    public HtmlSaxDiffOutput(ContentHandler consumer) {
        this.consumer = consumer;
    }

    public void startLine(DiffLineType type) throws Exception {
        currentLineType = type;
        AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "class", "class", "CDATA", "diff-" + type.toString());
        consumer.startElement("", "div", "div", attrs);
    }

    public void addUnchangedText(String text) throws Exception {
        consumer.characters(text.toCharArray(), 0, text.length());
    }

    public void addChangedText(String text) throws Exception {
        AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "class", "class", "CDATA", "diff-" + currentLineType.toString());
        consumer.startElement("", "span", "span", attrs);
        consumer.characters(text.toCharArray(), 0, text.length());
        consumer.endElement("", "span", "span");
    }

    public void endLine() throws Exception {
        consumer.endElement("", "div", "div");
    }

    public void skippedLines(int linesSkipped) throws Exception {
        AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "class", "class", "CDATA", "diff-skipped");
        consumer.startElement("", "div", "div", attrs);
        String message = "(" + linesSkipped + " empty lines skipped)";
        consumer.characters(message.toCharArray(), 0, message.length());
        consumer.endElement("", "div", "div");
    }
}
