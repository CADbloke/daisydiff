/*
 * Copyright 2004 Outerthought bvba and Schaubroeck nv
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.outerj.daisy.diff;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;

import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.AttributesImpl;

/**
 * Outputs the diff result as HTML elements to a SAX ContentHandler.
 * The startDocument and endDocument events are not generated by this class.
 */
public class DiffMarkup{
    private ContentHandler consumer;

    public DiffMarkup(ContentHandler consumer) throws SAXException {
        this.consumer = consumer;
    }

    public void addClearPart(String text) throws Exception {
    	addBasicText(text);
    }
    
    private void addBasicText(String text) throws SAXException {
    	
    	String[] split = text.split("\n");
    	if(split.length>0)
    		consumer.characters(split[0].toCharArray(), 0, split[0].length());
    	
    	AttributesImpl attrs = new AttributesImpl();
    	for(int i=1;i<split.length;i++){
    		consumer.startElement("", "br", "br", attrs);
	          consumer.endElement("", "br", "br");
	          
	          String newline = "\n";
	          consumer.characters(newline.toCharArray(), 0, newline.length());
	          consumer.characters(split[i].toCharArray(), 0, split[i].length());
    	}
//    	AttributesImpl attrs = new AttributesImpl();
//    	
//    	BufferedReader reader = new BufferedReader(new StringReader(text));
//        try {
//            String line = reader.readLine();
//            while (line != null) {
//            	consumer.characters(line.toCharArray(), 0, line.length());
//            	
//            	consumer.startElement("", "br", "br", attrs);
//                consumer.endElement("", "br", "br");
//                
//                line = "\n";
//                consumer.characters(line.toCharArray(), 0, line.length());
//                
//                line = reader.readLine();
//            }
//        } catch (IOException e) {
//            throw new RuntimeException("Unexpected: got exception while reading from String object.", e);
//        }
		
	}

	public void addRemovedPart(String text) throws Exception {
        AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "color", "color", "CDATA", "red");
//        attrs.addAttribute("", "size", "size", "CDATA", "2");
        
         consumer.startElement("", "font", "font", attrs);
         consumer.startElement("", "strike", "strike", new AttributesImpl());
         addBasicText(text);
         consumer.endElement("", "strike", "strike");
         consumer.endElement("", "font", "font");
    }
    
    public void addAddedPart(String text) throws Exception {
        AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "color", "color", "CDATA", "green");
        
         consumer.startElement("", "font", "font", attrs);
         addBasicText(text);
         consumer.endElement("", "font", "font");
    }

	public void printInfo()  throws Exception {
		AttributesImpl attrs = new AttributesImpl();
        consumer.startElement("", "u", "u", attrs);
        String text = "Begin Diff Markup:";
        consumer.characters(text.toCharArray(), 0, text.length());
        consumer.endElement("", "u", "u");
        consumer.startElement("", "br", "br", attrs);
        consumer.endElement("", "br", "br");
	}

	public void addSeperator() throws SAXException {
		AttributesImpl attrs = new AttributesImpl();
        attrs.addAttribute("", "color", "color", "CDATA", "orange");
        
         consumer.startElement("", "font", "font", attrs);
         addBasicText("|");
         consumer.endElement("", "font", "font");
	}
}
